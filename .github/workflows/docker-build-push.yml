# .github/workflows/docker-build-push.yml
name: Build and Push to GCP Artifact Registry

on:
  push:
    branches:
      - master
      - feature/DP-326-Use-registry-to-manage-and-build-images
  # Optionally allow manual triggers
  workflow_dispatch:

env:
  PROJECT_ID: client-x-429512
  REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: client-x-registry
  IMAGE_NAME: superset

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}     

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }}

      - name: Get short SHA
        id: sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        env:
          IMAGE_TAG: ${{ steps.sha.outputs.sha }}
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      - name: Build and push Superset images
        run: |
          # Set registry prefix and tag
          REGISTRY_PREFIX="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}"
          SUPERSET_TAG=$(date +%Y%m%d-%H%M%S)

          # Build the main Superset image
          docker build \
            --target dev \
            --cache-from apache/superset-cache:3.10-slim-bookworm \
            -t ${REGISTRY_PREFIX}/superset:${SUPERSET_TAG} \
            -t ${REGISTRY_PREFIX}/superset:latest \
            .

          # Tag worker and beat images from the main build
          docker tag ${REGISTRY_PREFIX}/superset:${SUPERSET_TAG} ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset-worker:${SUPERSET_TAG}
          docker tag ${REGISTRY_PREFIX}/superset:${SUPERSET_TAG} ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset-worker:latest
          docker tag ${REGISTRY_PREFIX}/superset:${SUPERSET_TAG} ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset-worker-beat:${SUPERSET_TAG}
          docker tag ${REGISTRY_PREFIX}/superset:${SUPERSET_TAG} ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset-worker-beat:latest

          # Push all Superset images
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset:${SUPERSET_TAG}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset:latest
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset-worker:${SUPERSET_TAG}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset-worker:latest
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset-worker-beat:${SUPERSET_TAG}
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/superset-worker-beat:latest          
